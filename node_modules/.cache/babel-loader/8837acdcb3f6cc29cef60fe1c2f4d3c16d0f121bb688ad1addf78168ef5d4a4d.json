{"ast":null,"code":"var _jsxFileName = \"/Users/tehila/Desktop/Bootcamp/Week20/Portfolio/src/components/themeContext.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ParticlesConfig from \"./ParticlesConfig\";\nimport { useCallback } from \"react\";\nimport { loadFull } from \"tsparticles\";\nimport Particles from \"react-tsparticles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    const storedPrefs = window.localStorage.getItem('current-theme');\n    if (typeof storedPrefs === 'string') {\n      return storedPrefs;\n    }\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n  }\n  return 'light';\n};\nexport const ThemeContext = /*#__PURE__*/React.createContext();\nexport const ThemeProvider = ({\n  initialTheme,\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = React.useState(getInitialTheme);\n  const particlesInit = useCallback(async engine => {\n    console.log(engine);\n    await loadFull(engine);\n  }, []);\n  const [particlesContainer, setParticlesContainer] = useState();\n  const particlesLoaded = useCallback(container => {\n    setParticlesContainer(container);\n  }, []);\n  useEffect(() => {\n    if (particlesContainer && particlesContainer.currentTheme !== theme) {\n      particlesContainer.loadTheme(theme);\n    }\n  }, [theme, particlesContainer]);\n  const checkTheme = existing => {\n    const root = window.document.documentElement;\n    const isDark = existing === 'dark';\n    root.classList.remove(isDark ? 'light' : 'dark');\n    root.classList.add(existing);\n    localStorage.setItem('current-theme', existing);\n  };\n  if (initialTheme) {\n    checkTheme(initialTheme);\n  }\n  React.useEffect(() => {\n    checkTheme(theme);\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(Particles, {\n      theme: theme,\n      id: \"tsparticles\",\n      particlesLoaded: \"particlesLoaded\",\n      init: particlesInit,\n      loaded: particlesLoaded,\n      options: ParticlesConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"vXWi8tujTftpqZC8LjTIvXXabH0=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","useEffect","useState","ParticlesConfig","useCallback","loadFull","Particles","jsxDEV","_jsxDEV","getInitialTheme","window","localStorage","storedPrefs","getItem","matchMedia","matches","ThemeContext","createContext","ThemeProvider","initialTheme","children","_s","theme","setTheme","particlesInit","engine","console","log","particlesContainer","setParticlesContainer","particlesLoaded","container","currentTheme","loadTheme","checkTheme","existing","root","document","documentElement","isDark","classList","remove","add","setItem","Provider","value","id","init","loaded","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tehila/Desktop/Bootcamp/Week20/Portfolio/src/components/themeContext.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ParticlesConfig from \"./ParticlesConfig\";\nimport { useCallback } from \"react\";\nimport { loadFull } from \"tsparticles\";\nimport Particles from \"react-tsparticles\";\n\n\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    const storedPrefs = window.localStorage.getItem('current-theme');\n    if (typeof storedPrefs === 'string') {\n      return storedPrefs;\n    }\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n  }\n  return 'light';\n};\n\nexport const ThemeContext = React.createContext();\n\nexport const ThemeProvider = ({ initialTheme, children }) => {\n  const [theme, setTheme] = React.useState(getInitialTheme);\n  const particlesInit = useCallback(async (engine) => {\n    console.log(engine);\n    await loadFull(engine);\n  }, []);\n\n  const [particlesContainer, setParticlesContainer] = useState();\n\n  const particlesLoaded = useCallback((container) => {\n    setParticlesContainer(container);\n  }, []);\n  useEffect(() => {\n    if (particlesContainer && particlesContainer.currentTheme !== theme) {\n      particlesContainer.loadTheme(theme);\n    }\n  }, [theme, particlesContainer]);\n\n  const checkTheme = (existing) => {\n    const root = window.document.documentElement;\n    const isDark = existing === 'dark';\n\n    root.classList.remove(isDark ? 'light' : 'dark');\n    root.classList.add(existing);\n\n    localStorage.setItem('current-theme', existing);\n  };\n\n  if (initialTheme) {\n    checkTheme(initialTheme);\n  }\n\n  React.useEffect(() => {\n    checkTheme(theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n      <Particles\n        theme={theme}\n        id=\"tsparticles\"\n        particlesLoaded=\"particlesLoaded\"\n        init={particlesInit}\n        loaded={particlesLoaded}\n        options={ParticlesConfig}\n      />\n    </ThemeContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}